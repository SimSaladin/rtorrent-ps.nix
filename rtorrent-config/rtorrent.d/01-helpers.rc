# Misc. custom helper methods

# Like execute.capture, but takes a shell command to run instead.
# Usage:
#   execute.system_capture = <script>[, <pos-arg-1>[, <pos-arg-2>[, <pos-arg-3>]]]
# Example usage:
#   execute.system_capture = "echo $HOME; ls -l ~/.config"
# This variant also strips any trailing whitespace from standard output as
# shells usually do by default.
method.insert = execute.capture_system, simple, "string.rstrip = \
  (execute.capture, bash, -ceuo, pipefail, --, (argument.0), -, \
  (argument.1), (argument.2), (argument.3))"

# Like execute.capture_nothrow but with the same changes as apply to
# 'execute.capture_system' above.
method.insert = execute.capture_system_nothrow, simple, "string.rstrip = \
  (execute.capture_nothrow, bash, -ceuo, pipefail, --, (argument.0), -, \
  (argument.1), (argument.2), (argument.3))"

# os.path.exists = <path> >> bool (0 or 1)
#   Check if <<path>> exists.
method.insert = os.path.exists, simple, "string.equals = 0, \
  (execute.capture_system, \"set +e; test -e \\\"$1\\\"; echo $?\", (argument.0))"

# check if path is a readable file
method.insert = os.path.readable, simple, "string.equals = 0, \
  (execute.capture_system, \"set +e; test -r \\\"$1\\\"; echo $?\", (argument.0))"

# Attempt to import the argument when it's a file
method.insert = try_import_existing, simple, "branch = \
  (os.path.readable, (argument.0)), (try_import, (argument.0))"
